#!/usr/bin/env python3
"""
CTMM Document Conversion Pipeline
Converts Word documents and Markdown files to LaTeX format with CTMM styling.
"""

import os
import re
import subprocess
import sys
from pathlib import Path
import logging
from typing import List, Dict, Optional
import shutil

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('conversion_pipeline.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class CTMMDocumentConverter:
    """Convert therapy documents to CTMM-styled LaTeX format."""
    
    def __init__(self, source_dir: str = "therapie-material", output_dir: str = "converted"):
        self.source_dir = Path(source_dir)
        self.output_dir = Path(output_dir)
        self.converted_files = []
        
        # Create output directory
        self.output_dir.mkdir(exist_ok=True)
        
        # CTMM LaTeX template
        self.latex_template = """% {filename} - Converted from {source_file}
% CTMM Therapy Material - Auto-generated by Conversion Pipeline

\\section{{{title}}}
\\label{{sec:{label}}}

{content}

% End of {filename}
"""

        # LaTeX replacements for common patterns
        self.latex_replacements = [
            # Headers
            (r'^# (.+)$', r'\\section{\1}'),
            (r'^## (.+)$', r'\\subsection{\1}'),
            (r'^### (.+)$', r'\\subsubsection{\1}'),
            
            # Bold and italic
            (r'\*\*(.+?)\*\*', r'\\textbf{\1}'),
            (r'\*(.+?)\*', r'\\textit{\1}'),
            
            # Lists
            (r'^- (.+)$', r'\\item \1'),
            (r'^(\d+)\. (.+)$', r'\\item \2'),
            
            # Special characters
            (r'&', r'\\&'),
            (r'%', r'\\%'),
            (r'\$', r'\\$'),
            (r'_', r'\\_'),
            (r'#', r'\\#'),
            
            # Common therapy terms
            (r'\bTrigger\b', r'\\textcolor{ctmmRed}{Trigger}'),
            (r'\bCTMM\b', r'\\textcolor{ctmmBlue}{CTMM}'),
            (r'\bBorderline\b', r'\\textcolor{ctmmPurple}{Borderline}'),
            (r'\bADHS\b', r'\\textcolor{ctmmOrange}{ADHS}'),
        ]

    def convert_docx_to_text(self, docx_path: Path) -> Optional[str]:
        """Convert DOCX to plain text using pandoc if available."""
        try:
            # First try with pandoc
            result = subprocess.run(
                ['pandoc', '-f', 'docx', '-t', 'markdown', str(docx_path)],
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.warning(f"Pandoc not available or failed for {docx_path}, creating template")
            return self._create_docx_template(docx_path)

    def _create_docx_template(self, docx_path: Path) -> str:
        """Create a template for DOCX files when pandoc is not available."""
        title = self._filename_to_title(docx_path.stem)
        return f"""% Template for {docx_path.name}
% TODO: Manual conversion required

\\textit{{This document requires manual conversion from {docx_path.name}.}}

\\begin{{ctmmBlueBox}}{{{title}}}
Content from the original Word document needs to be added here manually.

Key elements to include:
\\begin{{itemize}}
\\item Main content sections
\\item Interactive elements (checkboxes, forms)
\\item Therapy instructions
\\item Navigation elements
\\end{{itemize}}
\\end{{ctmmBlueBox}}

% TODO: Complete conversion from {docx_path.name}
"""

    def _filename_to_title(self, filename: str) -> str:
        """Convert filename to readable title."""
        # Clean filename
        title = filename.replace('_', ' ').replace('-', ' ')
        # Handle CTMM-specific naming
        title = re.sub(r'\bctmm\b', 'CTMM', title, flags=re.IGNORECASE)
        title = re.sub(r'\btool\s*(\d+)', r'Tool \1', title, flags=re.IGNORECASE)
        return title.title()

    def _create_label(self, filename: str) -> str:
        """Create LaTeX label from filename."""
        label = filename.lower()
        label = re.sub(r'[^a-z0-9-]', '-', label)
        label = re.sub(r'-+', '-', label)
        return label.strip('-')

    def apply_latex_formatting(self, content: str) -> str:
        """Apply LaTeX formatting to markdown content."""
        # Process line by line to handle lists properly
        lines = content.split('\n')
        processed_lines = []
        in_list = False
        in_numbered_list = False
        
        for line in lines:
            line = line.strip()
            
            # Handle lists
            if line.startswith('- ') or line.startswith('* '):
                if not in_list:
                    processed_lines.append('\\begin{itemize}')
                    in_list = True
                processed_lines.append(f'\\item {line[2:]}')
                continue
            elif re.match(r'^\d+\.\s', line):
                if not in_numbered_list:
                    processed_lines.append('\\begin{enumerate}')
                    in_numbered_list = True
                processed_lines.append(f'\\item {re.sub(r"^\d+\.\s", "", line)}')
                continue
            else:
                # End lists if we're in one
                if in_list:
                    processed_lines.append('\\end{itemize}')
                    in_list = False
                if in_numbered_list:
                    processed_lines.append('\\end{enumerate}')
                    in_numbered_list = False
            
            # Apply other replacements
            for pattern, replacement in self.latex_replacements:
                line = re.sub(pattern, replacement, line, flags=re.MULTILINE)
            
            processed_lines.append(line)
        
        # Close any remaining lists
        if in_list:
            processed_lines.append('\\end{itemize}')
        if in_numbered_list:
            processed_lines.append('\\end{enumerate}')
        
        return '\n'.join(processed_lines)

    def convert_file(self, source_path: Path) -> bool:
        """Convert a single file to LaTeX."""
        logger.info(f"Converting {source_path}")
        
        # Determine output filename
        output_filename = source_path.stem + '.tex'
        output_path = self.output_dir / output_filename
        
        try:
            if source_path.suffix.lower() == '.docx':
                content = self.convert_docx_to_text(source_path)
            elif source_path.suffix.lower() == '.md':
                with open(source_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            else:
                logger.warning(f"Unsupported file type: {source_path}")
                return False
            
            if content is None:
                logger.error(f"Failed to extract content from {source_path}")
                return False
            
            # Apply LaTeX formatting
            formatted_content = self.apply_latex_formatting(content)
            
            # Generate title and label
            title = self._filename_to_title(source_path.stem)
            label = self._create_label(source_path.stem)
            
            # Create final LaTeX document
            latex_content = self.latex_template.format(
                filename=output_filename,
                source_file=source_path.name,
                title=title,
                label=label,
                content=formatted_content
            )
            
            # Write to output file
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(latex_content)
            
            self.converted_files.append(output_path)
            logger.info(f"✓ Converted {source_path} → {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"Error converting {source_path}: {e}")
            return False

    def convert_all_documents(self) -> List[Path]:
        """Convert all supported documents in the source directory."""
        logger.info(f"Starting conversion of documents in {self.source_dir}")
        
        if not self.source_dir.exists():
            logger.error(f"Source directory {self.source_dir} does not exist")
            return []
        
        # Find all supported files
        supported_extensions = ['.docx', '.md', '.txt']
        source_files = []
        
        for ext in supported_extensions:
            source_files.extend(self.source_dir.glob(f'*{ext}'))
        
        # Convert README.md if it exists in the root
        readme_path = Path('README.md')
        if readme_path.exists():
            source_files.append(readme_path)
        
        logger.info(f"Found {len(source_files)} files to convert")
        
        # Convert each file
        for source_file in source_files:
            self.convert_file(source_file)
        
        return self.converted_files

    def generate_conversion_report(self) -> str:
        """Generate a report of the conversion process."""
        total_files = len(list(self.source_dir.glob('*.docx')) + list(self.source_dir.glob('*.md')))
        converted_count = len(self.converted_files)
        
        report = f"""
CTMM Document Conversion Report
==============================

## Summary
- Total source files found: {total_files}
- Successfully converted: {converted_count}
- Output directory: {self.output_dir}

## Converted Files
"""
        for file_path in self.converted_files:
            report += f"- {file_path.name}\n"
        
        report += f"""
## Integration Instructions
1. Review converted LaTeX files in {self.output_dir}/
2. Add input commands to main.tex:
```latex
"""
        for file_path in self.converted_files:
            stem = file_path.stem
            report += f"\\input{{{self.output_dir.name}/{stem}}}\n"
        
        report += """```
3. Test build with new modules
4. Refine formatting and add CTMM styling as needed

## Next Steps
- Manual review and formatting improvements
- Integration with existing CTMM modules
- Testing with build system
"""
        return report


def main():
    """Run the CTMM document conversion pipeline."""
    logger.info("Starting CTMM Document Conversion Pipeline...")
    
    # Check if pandoc is available
    try:
        subprocess.run(['pandoc', '--version'], 
                      capture_output=True, check=True)
        logger.info("Pandoc found - will convert DOCX files")
    except (subprocess.CalledProcessError, FileNotFoundError):
        logger.warning("Pandoc not found - will create templates for DOCX files")
    
    converter = CTMMDocumentConverter()
    converted_files = converter.convert_all_documents()
    
    # Generate and save report
    report = converter.generate_conversion_report()
    with open('conversion_report.md', 'w', encoding='utf-8') as f:
        f.write(report)
    
    logger.info(f"Conversion complete! Converted {len(converted_files)} files")
    logger.info("Report saved to conversion_report.md")
    print(report)
    
    return 0 if converted_files else 1


if __name__ == "__main__":
    sys.exit(main())