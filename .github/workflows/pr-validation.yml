name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    name: Validate PR has meaningful changes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare with base

      - name: Check if PR has file changes
        id: check_changes
        run: |
          # Get the number of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # Get specific change statistics
          ADDITIONS=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $1} END {print sum+0}')
          DELETIONS=$(git diff --numstat origin/${{ github.base_ref }}..HEAD | awk '{sum += $2} END {print sum+0}')
          
          echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
          echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
          
          # Log the changes for debugging
          echo "PR Statistics:"
          echo "- Changed files: $CHANGED_FILES"
          echo "- Lines added: $ADDITIONS"
          echo "- Lines deleted: $DELETIONS"
          
          # List changed files
          echo "Changed files:"
          git diff --name-only origin/${{ github.base_ref }}..HEAD || echo "No files changed"

      - name: Validate PR has meaningful content
        run: |
          CHANGED_FILES=${{ steps.check_changes.outputs.changed_files }}
          ADDITIONS=${{ steps.check_changes.outputs.additions }}
          DELETIONS=${{ steps.check_changes.outputs.deletions }}
          
          echo "Validating PR changes..."
          echo "Files changed: $CHANGED_FILES"
          echo "Lines added: $ADDITIONS"
          echo "Lines deleted: $DELETIONS"
          
          # Check if this is a meaningful PR
          if [[ $CHANGED_FILES -eq 0 ]]; then
            echo "❌ ERROR: This PR has no file changes!"
            echo "Copilot cannot review PRs without file changes."
            echo "Please ensure your changes are properly committed and pushed."
            exit 1
          fi
          
          # Check for very minimal changes that might indicate an issue
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          if [[ $TOTAL_CHANGES -eq 0 ]]; then
            echo "❌ ERROR: This PR has no line changes!"
            echo "Files may have been modified but contain no actual content changes."
            echo "Please verify your changes are meaningful."
            exit 1
          fi
          
          # Success message
          echo "✅ PR validation passed!"
          echo "This PR contains $CHANGED_FILES changed file(s) with $TOTAL_CHANGES total line changes."
          echo "Copilot should be able to review this PR successfully."

      - name: Add PR comment if validation fails
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const comment = `## ⚠️ PR Validation Failed
            
            This pull request has no file changes, which prevents GitHub Copilot from reviewing it.
            
            **Common causes:**
            - Changes were not properly committed
            - Changes were not pushed to the branch
            - Only whitespace or formatting changes
            - Git configuration issues
            
            **To fix this:**
            1. Verify your changes are saved and committed: \`git status\`
            2. Ensure changes are pushed: \`git push origin ${pullRequest.head.ref}\`
            3. Check that files contain meaningful changes
            
            Once fixed, Copilot will be able to review your changes properly.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });