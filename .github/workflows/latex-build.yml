---
name: Build LaTeX PDF

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Set up Python
        timeout-minutes: 5
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        timeout-minutes: 5
        run: |
          echo "📦 Installing Python dependencies..."
          pip install chardet
          echo "✅ Python dependencies installed successfully"

      - name: Run LaTeX syntax validation
        timeout-minutes: 5
        run: |
          echo "🔍 Starting LaTeX syntax validation..."
          python3 validate_latex_syntax.py
          echo "✅ LaTeX syntax validation completed successfully"
          
      - name: Run CTMM Build System Check
        timeout-minutes: 10
        run: |
          echo "🔧 Starting CTMM build system check..."
          python3 ctmm_build.py
          echo "✅ CTMM build system check completed successfully"
          
      - name: Run Enhanced Build Management
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "🚀 Running enhanced CTMM build management..."
          python3 ctmm_build.py --enhanced || echo "⚠️  Enhanced build management had warnings but continuing..."
          echo "✅ Enhanced build management completed"
          
      - name: Run comprehensive CI validation
        timeout-minutes: 10
        run: |
          echo "📋 Starting comprehensive CI validation..."
          python3 test_issue_743_validation.py
          echo "✅ Comprehensive CI validation completed successfully"
          
      - name: Enhanced pre-build validation
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "🔍 Running enhanced pre-build validation..."
          # Check for critical files and dependencies
          python3 test_issue_761_fix.py || echo "⚠️  Warning: Some robustness checks failed but continuing..."
          echo "✅ Enhanced pre-build validation completed"

      - name: Check system resources before LaTeX compilation
        timeout-minutes: 3
        run: |
          echo "📊 Checking system resources..."
          df -h
          free -h
          echo "✅ System resources checked"

      - name: Assess GitHub Actions runner environment
        timeout-minutes: 3
        run: |
          echo "🔍 Assessing GitHub Actions runner environment..."
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Architecture: $RUNNER_ARCH" 
          echo "GitHub Actions Runner: $RUNNER_NAME"
          df -h / | head -2
          free -h | head -2
          echo "CPU Info:" && nproc
          echo "✅ Environment assessment complete"

      - name: Enhanced CI environment validation
        timeout-minutes: 5
        run: |
          echo "🔧 Running enhanced CI environment validation..."
          python3 validate_ci_environment.py
          echo "✅ Enhanced CI environment validation completed"

      - name: CI failure prevention analysis
        timeout-minutes: 5
        continue-on-error: true
        run: |
          echo "🛡️ Running CI failure prevention analysis..."
          python3 ci_failure_prevention.py || echo "⚠️ Some prevention checks flagged potential issues but continuing..."
          echo "✅ CI failure prevention analysis completed"

      - name: Set up LaTeX (Primary)
        timeout-minutes: 15
        id: latex_primary
        continue-on-error: true
        uses: xu-cheng/latex-action@v3
        with:
          root_file: main.tex
          args: -interaction=nonstopmode -halt-on-error -shell-escape
          extra_system_packages: |
            texlive-lang-german
            texlive-fonts-recommended
            texlive-latex-recommended
            texlive-fonts-extra
            texlive-latex-extra
            texlive-science
            texlive-pstricks

      - name: Set up LaTeX (Fallback - Manual TeX Live)
        timeout-minutes: 20
        if: steps.latex_primary.outcome == 'failure'
        run: |
          echo "🔄 Primary LaTeX action failed, using manual TeX Live installation..."
          
          # Install TeX Live manually
          sudo apt-get update
          sudo apt-get install -y \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-lang-german \
            texlive-science \
            texlive-pstricks \
            texlive-latex-recommended
          
          # Verify installation
          which pdflatex
          pdflatex --version
          
          # Compile the document
          echo "🔨 Compiling LaTeX document manually..."
          pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex
          
          # Second pass for references
          pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex
          
          echo "✅ Manual LaTeX compilation completed"
            
      - name: Verify PDF generation (Enhanced)
        timeout-minutes: 5
        run: |
          echo "🔍 Enhanced PDF verification starting..."
          
          # Check if PDF was generated
          if [ -f "main.pdf" ]; then
            echo "✅ PDF file found: main.pdf"
            
            # Detailed file analysis
            echo "📊 PDF File Analysis:"
            echo "  File size: $(ls -lh main.pdf | awk '{print $5}')"
            echo "  Last modified: $(stat -c %y main.pdf)"
            
            # Check if PDF is valid and readable
            if command -v pdfinfo >/dev/null 2>&1; then
              echo "📄 PDF Information:"
              pdfinfo main.pdf | head -10
            else
              echo "ℹ️  pdfinfo not available for detailed PDF analysis"
            fi
            
            # Verify PDF is not corrupted (basic check)
            file main.pdf
            
            # Check file is not empty
            if [ -s main.pdf ]; then
              echo "✅ PDF file is not empty"
            else
              echo "❌ PDF file is empty or corrupted"
              exit 1
            fi
            
            echo "✅ PDF verification completed successfully"
            
          else
            echo "❌ PDF generation failed - file not found"
            
            # Enhanced error reporting
            echo ""
            echo "🔍 Diagnostic Information:"
            echo "  Current directory: $(pwd)"
            echo "  Files present:"
            ls -la | head -20
            
            echo ""
            echo "📋 LaTeX Log Files Analysis:"
            if find . -name "*.log" -type f | head -1 >/dev/null 2>&1; then
              for logfile in $(find . -name "*.log" -type f); do
                echo ""
                echo "=== $logfile (last 30 lines) ==="
                tail -30 "$logfile"
              done
            else
              echo "  No LaTeX log files found"
            fi
            
            echo ""
            echo "🔧 Build Environment Check:"
            echo "  pdflatex available: $(which pdflatex >/dev/null 2>&1 && echo 'YES' || echo 'NO')"
            echo "  LaTeX distribution: $(pdflatex --version 2>/dev/null | head -1 || echo 'Not available')"
            
            exit 1
          fi

      - name: Upload PDF artifact
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: CTMM_PDF
          path: main.pdf

      - name: Upload build logs (on failure)
        if: failure()
        timeout-minutes: 5
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            *.log
            build_error_*.log
            build_system.log
