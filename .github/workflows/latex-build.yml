---
name: Build LaTeX PDF

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          pip install chardet

      - name: Run LaTeX syntax validation
        run: |
          python3 validate_latex_syntax.py
          
      - name: Run CTMM Build System Check
        run: |
          python3 ctmm_build.py
          
      - name: Run Enhanced Build Management
        run: |
          echo "🚀 Running enhanced CTMM build management..."
          python3 ctmm_build.py --enhanced
          
      - name: Run comprehensive CI validation
        run: |
          python3 test_issue_743_validation.py
          
      - name: Enhanced pre-build validation
        timeout-minutes: 5
        run: |
          echo "🔍 Running enhanced pre-build validation..."
          # Check for critical files and dependencies
          python3 test_issue_761_fix.py || echo "⚠️  Warning: Some robustness checks failed but continuing..."
          
          # Additional system checks for CI reliability
          echo "📊 System Information:"
          echo "- Disk space: $(df -h . | tail -1)"
          echo "- Memory: $(free -h | grep Mem)"
          echo "- CPU info: $(nproc) cores available"
          
          # Check for potential resource constraints
          AVAILABLE_SPACE=$(df . | tail -1 | awk '{print $4}')
          if [ "$AVAILABLE_SPACE" -lt 1048576 ]; then  # Less than 1GB
            echo "⚠️  Warning: Low disk space ($AVAILABLE_SPACE KB available)"
          fi

      - name: Pre-LaTeX system preparation
        timeout-minutes: 3
        run: |
          echo "🔧 Preparing system for LaTeX compilation..."
          
          # Clear any previous build artifacts
          rm -f main.pdf main.aux main.log main.out main.toc *.fls *.fdb_latexmk
          
          # Ensure proper file permissions
          chmod 644 main.tex
          find modules/ -name "*.tex" -exec chmod 644 {} \; 2>/dev/null || true
          find style/ -name "*.sty" -exec chmod 644 {} \; 2>/dev/null || true
          
          echo "✅ System preparation completed"

      - name: Set up LaTeX with retry mechanism
        uses: dante-ev/latex-action@v2
        timeout-minutes: 15
        continue-on-error: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          root_file: main.tex
          args: -interaction=nonstopmode -halt-on-error -shell-escape
          extra_system_packages: |
            texlive-lang-german
            texlive-fonts-recommended
            texlive-latex-recommended
            texlive-fonts-extra
            texlive-latex-extra
            texlive-science
            texlive-pstricks
            
      - name: LaTeX compilation retry (if needed)
        if: failure()
        timeout-minutes: 10
        run: |
          echo "🔄 LaTeX compilation failed, attempting retry with additional diagnostics..."
          
          # Clean up any partial files
          rm -f main.pdf main.aux main.log main.out
          
          # Try manual compilation with more verbose output
          if command -v pdflatex >/dev/null 2>&1; then
            echo "📝 Attempting manual pdflatex compilation..."
            pdflatex -version
            
            # First pass
            echo "🔄 Running pdflatex (pass 1/2)..."
            pdflatex -interaction=nonstopmode -halt-on-error main.tex || {
              echo "❌ First pass failed, checking log..."
              cat main.log 2>/dev/null || echo "No log file found"
              exit 1
            }
            
            # Second pass for cross-references
            echo "🔄 Running pdflatex (pass 2/2)..."
            pdflatex -interaction=nonstopmode -halt-on-error main.tex || {
              echo "❌ Second pass failed, checking log..."
              cat main.log 2>/dev/null || echo "No log file found"
              exit 1
            }
            
            echo "✅ Manual compilation completed"
          else
            echo "❌ pdflatex not available for manual retry"
            exit 1
          fi
            
      - name: Verify PDF generation
        timeout-minutes: 5
        run: |
          echo "🔍 Checking PDF generation status..."
          
          # Wait a moment for file system sync
          sleep 2
          
          # Check if PDF exists and has reasonable size
          if [ -f "main.pdf" ]; then
            PDF_SIZE=$(stat -c%s "main.pdf" 2>/dev/null || echo "0")
            if [ "$PDF_SIZE" -gt 1024 ]; then
              echo "✅ PDF successfully generated (${PDF_SIZE} bytes)"
              ls -la main.pdf
              
              # Additional PDF validation
              if command -v file >/dev/null 2>&1; then
                file main.pdf
              fi
            else
              echo "⚠️  PDF file exists but is too small (${PDF_SIZE} bytes)"
              echo "This suggests an incomplete compilation."
              echo "Checking for LaTeX log files..."
              find . -name "*.log" -exec echo "=== {} ===" \; -exec head -50 {} \;
              exit 1
            fi
          else
            echo "❌ PDF generation failed - file not found"
            echo "Checking for LaTeX log files..."
            find . -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \;
            echo ""
            echo "🔍 Checking directory contents:"
            ls -la
            exit 1
          fi

      - name: Upload PDF artifact
        if: success()
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: CTMM_PDF
          path: main.pdf
          retention-days: 30

      - name: Upload comprehensive build logs (on failure)
        if: failure()
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: build_logs_${{ github.run_id }}
          path: |
            *.log
            *.aux
            *.out
            *.toc
            *.fls
            *.fdb_latexmk
            build_error_*.log
            build_system.log
          retention-days: 7
          
      - name: Generate failure summary (on failure)
        if: failure()
        timeout-minutes: 3
        run: |
          echo "📋 BUILD FAILURE SUMMARY" > failure_summary.txt
          echo "=========================" >> failure_summary.txt
          echo "Run ID: ${{ github.run_id }}" >> failure_summary.txt
          echo "Commit: ${{ github.sha }}" >> failure_summary.txt
          echo "Timestamp: $(date -u)" >> failure_summary.txt
          echo "" >> failure_summary.txt
          
          echo "🔍 SYSTEM INFORMATION:" >> failure_summary.txt
          echo "- Runner OS: ${{ runner.os }}" >> failure_summary.txt
          echo "- Workflow: ${{ github.workflow }}" >> failure_summary.txt
          echo "- Job: ${{ github.job }}" >> failure_summary.txt
          echo "" >> failure_summary.txt
          
          echo "📁 DIRECTORY CONTENTS:" >> failure_summary.txt
          ls -la >> failure_summary.txt 2>&1 || echo "Failed to list directory" >> failure_summary.txt
          echo "" >> failure_summary.txt
          
          if [ -f "main.log" ]; then
            echo "📄 LATEX LOG (last 50 lines):" >> failure_summary.txt
            tail -50 main.log >> failure_summary.txt 2>&1
          else
            echo "❌ No main.log file found" >> failure_summary.txt
          fi
          
          cat failure_summary.txt
          
      - name: Upload failure summary
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure_summary_${{ github.run_id }}
          path: failure_summary.txt
          retention-days: 7
