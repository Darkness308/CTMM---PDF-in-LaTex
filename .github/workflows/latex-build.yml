---
name: Build LaTeX PDF

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Set up Python
        timeout-minutes: 5
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        timeout-minutes: 5
        run: |
          echo "üì¶ Installing Python dependencies..."
          pip install chardet
          echo "‚úÖ Python dependencies installed successfully"

      - name: Run LaTeX syntax validation
        timeout-minutes: 5
        run: |
          echo "üîç Starting LaTeX syntax validation..."
          python3 validate_latex_syntax.py
          echo "‚úÖ LaTeX syntax validation completed successfully"
          
      - name: Run CTMM Build System Check
        timeout-minutes: 10
        run: |
          echo "üîß Starting CTMM build system check..."
          python3 ctmm_build.py
          echo "‚úÖ CTMM build system check completed successfully"
          
      - name: Run Enhanced Build Management
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "üöÄ Running enhanced CTMM build management..."
          python3 ctmm_build.py --enhanced || echo "‚ö†Ô∏è  Enhanced build management had warnings but continuing..."
          echo "‚úÖ Enhanced build management completed"
          
      - name: Run comprehensive CI validation
        timeout-minutes: 10
        run: |
          echo "üìã Starting comprehensive CI validation..."
          python3 test_issue_743_validation.py
          echo "‚úÖ Comprehensive CI validation completed successfully"
          
      - name: Enhanced pre-build validation
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "üîç Running enhanced pre-build validation..."
          # Check for critical files and dependencies
          python3 test_issue_761_fix.py || echo "‚ö†Ô∏è  Warning: Some robustness checks failed but continuing..."
          echo "‚úÖ Enhanced pre-build validation completed"

      - name: Check system resources before LaTeX compilation
        timeout-minutes: 3
        run: |
          echo "üìä Checking system resources..."
          df -h
          free -h
          echo "‚úÖ System resources checked"

      - name: Assess GitHub Actions runner environment
        timeout-minutes: 3
        run: |
          echo "üîç Assessing GitHub Actions runner environment..."
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Architecture: $RUNNER_ARCH" 
          echo "GitHub Actions Runner: $RUNNER_NAME"
          df -h / | head -2
          free -h | head -2
          echo "CPU Info:" && nproc
          echo "‚úÖ Environment assessment complete"

      # PRIMARY METHOD: Use xu-cheng/latex-action (more reliable alternative)
      - name: Set up LaTeX (Primary Method)
        id: latex_primary
        timeout-minutes: 15
        continue-on-error: true
        uses: xu-cheng/latex-action@v3
        with:
          root_file: main.tex
          args: -interaction=nonstopmode -halt-on-error -shell-escape
          extra_system_packages: |
            texlive-lang-german
            texlive-fonts-recommended
            texlive-latex-recommended
            texlive-fonts-extra
            texlive-latex-extra
            texlive-science
            texlive-pstricks

      # FALLBACK METHOD: Manual TeX Live installation if primary fails
      - name: Set up LaTeX (Fallback Method)
        if: steps.latex_primary.outcome == 'failure'
        timeout-minutes: 20
        run: |
          echo "üîÑ Primary LaTeX action failed, using fallback method..."
          echo "üì¶ Installing TeX Live manually..."
          
          # Update package lists
          sudo apt-get update
          
          # Install TeX Live and required packages
          sudo apt-get install -y \
            texlive-latex-base \
            texlive-latex-recommended \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-lang-german \
            texlive-science \
            texlive-pstricks \
            texlive-pictures \
            texlive-plain-generic
          
          echo "‚úÖ TeX Live installed successfully"
          
          # Verify installation
          pdflatex --version
          
          # Compile the LaTeX document
          echo "üî® Compiling LaTeX document..."
          pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex
          
          # Run twice to resolve references
          if [ -f "main.pdf" ]; then
            echo "üîÑ Running second pass for references..."
            pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex
            echo "‚úÖ LaTeX compilation completed successfully"
          else
            echo "‚ùå First pass failed"
            exit 1
          fi
            
      - name: Verify PDF generation
        timeout-minutes: 3
        run: |
          echo "üîç Verifying PDF generation..."
          if [ -f "main.pdf" ]; then
            echo "‚úÖ PDF successfully generated"
            ls -la main.pdf
            # Show PDF file size and basic info
            file main.pdf
            echo "üìÑ PDF size: $(du -h main.pdf | cut -f1)"
          else
            echo "‚ùå PDF generation failed"
            echo "Checking for LaTeX log files..."
            find . -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \;
            exit 1
          fi

      - name: Upload PDF artifact
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: CTMM_PDF
          path: main.pdf

      - name: Upload build logs (on failure)
        if: failure()
        timeout-minutes: 5
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            *.log
            build_error_*.log
            build_system.log
