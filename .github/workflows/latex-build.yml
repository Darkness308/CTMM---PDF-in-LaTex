---
name: Build LaTeX PDF

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        timeout-minutes: 5
        uses: actions/checkout@v4

      - name: Set up Python
        timeout-minutes: 5
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        timeout-minutes: 5
        run: |
          echo "üì¶ Installing Python dependencies..."
          pip install chardet
          echo "‚úÖ Python dependencies installed successfully"

      - name: Run LaTeX syntax validation
        timeout-minutes: 5
        run: |
          echo "üîç Starting LaTeX syntax validation..."
          python3 validate_latex_syntax.py
          echo "‚úÖ LaTeX syntax validation completed successfully"
          
      - name: Run CTMM Build System Check
        timeout-minutes: 10
        run: |
          echo "üîß Starting CTMM build system check..."
          python3 ctmm_build.py
          echo "‚úÖ CTMM build system check completed successfully"
          
      - name: Run Enhanced Build Management
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "üöÄ Running enhanced CTMM build management..."
          python3 ctmm_build.py --enhanced || echo "‚ö†Ô∏è  Enhanced build management had warnings but continuing..."
          echo "‚úÖ Enhanced build management completed"
          
      - name: Run comprehensive CI validation
        timeout-minutes: 10
        run: |
          echo "üìã Starting comprehensive CI validation..."
          python3 test_issue_743_validation.py
          echo "‚úÖ Comprehensive CI validation completed successfully"
          
      - name: Enhanced pre-build validation
        timeout-minutes: 8
        continue-on-error: true
        run: |
          echo "üîç Running enhanced pre-build validation..."
          # Check for critical files and dependencies
          python3 test_issue_761_fix.py || echo "‚ö†Ô∏è  Warning: Some robustness checks failed but continuing..."
          echo "‚úÖ Enhanced pre-build validation completed"

      - name: Check system resources before LaTeX compilation
        timeout-minutes: 3
        run: |
          echo "üìä Checking system resources..."
          df -h
          free -h
          echo "‚úÖ System resources checked"

      - name: Assess GitHub Actions runner environment
        timeout-minutes: 3
        run: |
          echo "üîç Assessing GitHub Actions runner environment..."
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Architecture: $RUNNER_ARCH" 
          echo "GitHub Actions Runner: $RUNNER_NAME"
          df -h / | head -2
          free -h | head -2
          echo "CPU Info:" && nproc
          echo "‚úÖ Environment assessment complete"

      - name: Enhanced CI environment validation
        timeout-minutes: 5
        run: |
          echo "üîß Running enhanced CI environment validation..."
          python3 validate_ci_environment.py
          echo "‚úÖ Enhanced CI environment validation completed"

      - name: CI failure prevention analysis
        timeout-minutes: 5
        continue-on-error: true
        run: |
          echo "üõ°Ô∏è Running CI failure prevention analysis..."
          python3 ci_failure_prevention.py || echo "‚ö†Ô∏è Some prevention checks flagged potential issues but continuing..."
          echo "‚úÖ CI failure prevention analysis completed"

      - name: Set up LaTeX (Primary - xu-cheng/latex-action@v3)
        id: latex_primary
        timeout-minutes: 15
        continue-on-error: true
        uses: xu-cheng/latex-action@v3
        with:
          root_file: main.tex
          args: -interaction=nonstopmode -halt-on-error -shell-escape
          extra_system_packages: |
            texlive-lang-german
            texlive-fonts-recommended
            texlive-latex-recommended
            texlive-fonts-extra
            texlive-latex-extra
            texlive-science
            texlive-pstricks

      - name: Set up LaTeX (Fallback - Manual TeX Live Installation)
        if: steps.latex_primary.outcome == 'failure'
        timeout-minutes: 20
        run: |
          echo "üîÑ Primary LaTeX action failed, using fallback manual installation..."
          
          # Update package lists
          sudo apt-get update
          
          # Install TeX Live and required packages
          echo "üì¶ Installing TeX Live packages..."
          sudo apt-get install -y \
            texlive-latex-base \
            texlive-latex-recommended \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-lang-german \
            texlive-science \
            texlive-pstricks \
            texlive-pictures \
            texlive-plain-generic
            
          echo "‚úÖ TeX Live installation completed"
          
          # Verify installation
          pdflatex --version
          
          # Compile LaTeX document
          echo "üî® Compiling LaTeX document with fallback method..."
          pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex
          pdflatex -interaction=nonstopmode -halt-on-error -shell-escape main.tex  # Second pass for references
          
          echo "‚úÖ Fallback LaTeX compilation completed"
            
      - name: Enhanced PDF Verification with Detailed Analysis
        timeout-minutes: 5
        run: |
          echo "üîç Enhanced PDF verification and analysis..."
          
          # Check if PDF was generated
          if [ -f "main.pdf" ]; then
            echo "‚úÖ PDF successfully generated"
            
            # Detailed file analysis
            echo "üìä PDF File Analysis:"
            echo "  File size: $(stat -c%s main.pdf) bytes"
            echo "  File permissions: $(stat -c%A main.pdf)"
            echo "  Created: $(stat -c%y main.pdf)"
            
            # Verify PDF is not corrupted using basic file command
            if file main.pdf | grep -q "PDF"; then
              echo "‚úÖ PDF file format verification passed"
            else
              echo "‚ùå PDF file format verification failed"
              file main.pdf
            fi
            
            # Check PDF file size (should be reasonable)
            PDF_SIZE=$(stat -c%s main.pdf)
            if [ "$PDF_SIZE" -gt 1000 ]; then
              echo "‚úÖ PDF size check passed ($PDF_SIZE bytes)"
            else
              echo "‚ùå PDF size check failed - file too small ($PDF_SIZE bytes)"
              echo "This may indicate compilation issues"
            fi
            
            # List directory contents for context
            echo "üìÇ Directory contents after compilation:"
            ls -la *.pdf *.log *.aux 2>/dev/null || echo "No additional LaTeX files found"
            
          else
            echo "‚ùå PDF generation failed - main.pdf not found"
            
            # Comprehensive error analysis
            echo "üîç Comprehensive error analysis:"
            echo "Current directory contents:"
            ls -la
            
            echo ""
            echo "üìÑ Checking for LaTeX log files..."
            if [ -f "main.log" ]; then
              echo "=== main.log (last 50 lines) ==="
              tail -50 main.log
            else
              echo "No main.log found"
            fi
            
            # Check for any other log files
            echo ""
            echo "üîç Looking for any .log files..."
            find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -20 {} \;
            
            # Check LaTeX installation status
            echo ""
            echo "üîß LaTeX installation verification:"
            which pdflatex || echo "pdflatex not found in PATH"
            pdflatex --version 2>/dev/null || echo "pdflatex version check failed"
            
            # Check if primary action failed and fallback was used
            if [ "${{ steps.latex_primary.outcome }}" = "failure" ]; then
              echo ""
              echo "‚ö†Ô∏è  Primary xu-cheng/latex-action@v3 failed, fallback method was attempted"
            fi
            
            exit 1
          fi

      - name: Upload PDF artifact
        timeout-minutes: 5
        uses: actions/upload-artifact@v4
        with:
          name: CTMM_PDF
          path: main.pdf

      - name: Upload build logs (on failure)
        if: failure()
        timeout-minutes: 5
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            *.log
            build_error_*.log
            build_system.log
