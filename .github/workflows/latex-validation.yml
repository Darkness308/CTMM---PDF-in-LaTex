name: LaTeX Validation

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check \documentclass in first 5 lines
        run: |
          head -n 5 main.tex | grep -q '\documentclass' || (echo "::error ::\documentclass fehlt in den ersten 5 Zeilen von main.tex" && exit 1)

      - name: Check no \usepackage after \begin{document}
        run: |
          awk '/\\begin\{document\}/ {flag=1; next} flag && /\\usepackage/ {print; exit 1}' main.tex || true

      - name: Check hyperref is last core package
        run: |
          # Find all usepackage lines excluding comments
          packages=$(grep '\usepackage' main.tex | grep -v '^%')
          
          # Check that hyperref appears before the end and before any bookmark package
          echo "$packages" | grep -q 'hyperref' || (echo "::error ::hyperref package not found in main.tex" && exit 1)
          
          # Get position of hyperref and bookmark (if exists)
          hyperref_line=$(echo "$packages" | grep -n 'hyperref' | head -1 | cut -d: -f1)
          bookmark_line=$(echo "$packages" | grep -n 'bookmark' | head -1 | cut -d: -f1)
          
          echo "Debug: hyperref at line $hyperref_line"
          echo "Debug: bookmark at line $bookmark_line"
          
          # If bookmark exists, it should come after hyperref
          if [ -n "$bookmark_line" ] && [ "$bookmark_line" -lt "$hyperref_line" ]; then
            echo "::error ::bookmark package should come after hyperref"
            exit 1
          fi
          
          # Check that no critical packages come after hyperref (except bookmark)
          # Use more robust arithmetic to avoid potential shell issues
          next_line=$((hyperref_line + 1))
          echo "Debug: checking from line $next_line onward"
          packages_after_hyperref=$(echo "$packages" | tail -n +${next_line} | grep -v 'bookmark')
          echo "Debug: packages after hyperref (filtered): '$packages_after_hyperref'"
          
          if [ -n "$packages_after_hyperref" ]; then
            echo "::error ::Core packages found after hyperref (only bookmark is allowed): $packages_after_hyperref"
            exit 1
          fi
          
          echo "‚úÖ hyperref package ordering is correct"

      - name: Check all \ctmmRef labels exist
        run: |
          refs=$(grep -o '\ctmmRef{[^}]*}' modules/*.tex | sed 's/.*{//;s/}//')
          for ref in $refs; do
            grep -q "\label{\$ref}" modules/*.tex main.tex || (echo "::error ::Label {\$ref} fehlt!" && exit 1)
          done

      - name: Build PDF
        uses: xu-cheng/latex-action@v3
        with:
          root_file: main.tex
          args: "-synctex=1 -interaction=nonstopmode -file-line-error"
          extra_system_packages: |
            texlive-lang-german
            texlive-fonts-recommended
            texlive-latex-recommended
            texlive-fonts-extra
            texlive-latex-extra
            texlive-science
            texlive-pstricks

      - name: Check PDF output
        run: |
          if [ ! -f build/main.pdf ]; then
            echo "::error ::main.pdf wurde nicht erzeugt"
            exit 1
          fi

      - name: Set up Python
        timeout-minutes: 5
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies  
        timeout-minutes: 5
        run: |
          echo "üì¶ Installing Python dependencies..."
          pip install chardet pyyaml
          echo "‚úÖ Python dependencies installed successfully"

      - name: Run LaTeX syntax validation
        timeout-minutes: 5
        run: |
          echo "üîç Starting LaTeX syntax validation..."
          python3 validate_latex_syntax.py
          echo "‚úÖ LaTeX syntax validation completed successfully"

      - name: Run CTMM Build System Check
        timeout-minutes: 10
        run: |
          echo "üîß Starting CTMM build system check..."
          python3 ctmm_build.py
          echo "‚úÖ CTMM build system check completed successfully"

      - name: Assess GitHub Actions runner environment
        timeout-minutes: 3
        run: |
          echo "üîç Assessing GitHub Actions runner environment..."
          echo "Runner OS: $RUNNER_OS"
          echo "Runner Architecture: $RUNNER_ARCH" 
          df -h / | head -2
          free -h | head -2
          echo "‚úÖ Environment assessment complete"

      - name: Upload validation logs (on failure)
        if: failure()
        timeout-minutes: 5
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: validation_logs
          path: |
            *.log
            build_error_*.log
