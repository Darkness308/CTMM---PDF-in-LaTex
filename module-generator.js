#!/usr/bin/env node

/**
 * CTMM Module Generator
 * 
 * JavaScript-based module generator for creating CTMM LaTeX therapeutic materials.
 * Supports three main module types: arbeitsblatt, tool, and notfallkarte.
 * 
 * Usage: node module-generator.js <type> <name> [options]
 * 
 * @author CTMM-Team
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');

// CTMM color scheme and design elements
const CTMM_COLORS = {
    blue: 'ctmmBlue',
    green: 'ctmmGreen', 
    orange: 'ctmmOrange',
    red: 'ctmmRed',
    purple: 'ctmmPurple',
    gray: 'ctmmGray',
    yellow: 'ctmmYellow'
};

// FontAwesome icons commonly used in CTMM
const CTMM_ICONS = {
    arbeitsblatt: '\\faEdit',
    tool: '\\faTools',
    notfallkarte: '\\faHeartbeat',
    trigger: '\\faExclamationCircle',
    depression: '\\faCloudRain',
    grounding: '\\faLeaf',
    communication: '\\faComments',
    navigation: '\\faCompass',
    warning: '\\faExclamationTriangle'
};

class CTMMModuleGenerator {
    constructor() {
        this.moduleTypes = ['arbeitsblatt', 'tool', 'notfallkarte'];
        this.outputDir = './modules';
    }

    /**
     * Generate a new CTMM module
     * @param {string} type - Module type (arbeitsblatt, tool, notfallkarte)
     * @param {string} name - Module name (will be sanitized)
     * @param {object} options - Additional options
     */
    generateModule(type, name, options = {}) {
        if (!this.moduleTypes.includes(type)) {
            throw new Error(`Invalid module type: ${type}. Valid types: ${this.moduleTypes.join(', ')}`);
        }

        const sanitizedName = this.sanitizeName(name);
        const fileName = `${type}-${sanitizedName}.tex`;
        const filePath = path.join(this.outputDir, fileName);

        // Ensure modules directory exists
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
        }

        // Generate module content based on type
        let content;
        switch (type) {
            case 'arbeitsblatt':
                content = this.generateArbeitsblatt(sanitizedName, options);
                break;
            case 'tool':
                content = this.generateTool(sanitizedName, options);
                break;
            case 'notfallkarte':
                content = this.generateNotfallkarte(sanitizedName, options);
                break;
        }

        // Write file
        fs.writeFileSync(filePath, content, 'utf8');
        
        console.log(`‚úÖ Generated ${type} module: ${fileName}`);
        console.log(`üìÅ Location: ${filePath}`);
        
        return filePath;
    }

    /**
     * Sanitize module name for file system compatibility
     */
    sanitizeName(name) {
        return name.toLowerCase()
            .replace(/[√§√∂√º√ü]/g, (char) => {
                const map = { '√§': 'ae', '√∂': 'oe', '√º': 'ue', '√ü': 'ss' };
                return map[char] || char;
            })
            .replace(/[^a-z0-9-]/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '');
    }

    /**
     * Generate Arbeitsblatt (worksheet) module
     */
    generateArbeitsblatt(name, options) {
        const title = options.title || this.formatTitle(name);
        const color = options.color || 'ctmmBlue';
        const icon = options.icon || CTMM_ICONS.arbeitsblatt;
        
        return `% CTMM Arbeitsblatt: ${title}
% Generated by CTMM Module Generator v1.0.0

\\newpage
\\section*{${icon}~${title.toUpperCase()}}
\\label{sec:arbeitsblatt-${name}}
\\addcontentsline{toc}{section}{${title}}

\\begin{${color.replace('ctmm', 'ctmm')}Box}{${icon}~Arbeitsbereich}
\\textbf{Name:} \\ctmmTextField[6cm]{}{${name}_name} \\quad \\textbf{Datum:} \\ctmmTextField[4cm]{}{${name}_date}\\\\
\\vspace{0.5cm}

\\textbf{Ziel dieser √úbung:}\\\\
\\textit{Beschreibe kurz, was du mit diesem Arbeitsblatt erreichen m√∂chtest.}\\\\
\\ctmmTextArea[12cm]{2}{${name}_goal}{}

\\vspace{0.8cm}
\\end{${color.replace('ctmm', 'ctmm')}Box}

\\subsection*{\\textcolor{${color}}{1. Situation erfassen}}

\\textbf{Aktuelle Situation beschreiben:}\\\\
\\textit{Was ist gerade los? Wo befindest du dich? Mit wem?}\\\\
\\ctmmTextArea[12cm]{3}{${name}_situation}{}

\\vspace{0.5cm}
\\textbf{Gef√ºhle und Gedanken:}\\\\
\\textit{Welche Gef√ºhle nimmst du wahr? Was geht dir durch den Kopf?}\\\\
\\ctmmTextArea[12cm]{3}{${name}_feelings}{}

\\subsection*{\\textcolor{${color}}{2. Reflexion und Bew√§ltigung}}

\\textbf{St√§rken und Ressourcen:}\\\\
\\textit{Was hilft dir normalerweise? Welche F√§higkeiten hast du?}\\\\
\\ctmmCheckBox[${name}_resource_breathing]{Atemtechniken} \\quad
\\ctmmCheckBox[${name}_resource_grounding]{Grounding-√úbungen} \\\\
\\ctmmCheckBox[${name}_resource_movement]{Bewegung} \\quad
\\ctmmCheckBox[${name}_resource_social]{Sozialer Kontakt} \\\\
\\ctmmCheckBox[${name}_resource_other]{Andere:} \\ctmmTextField[4cm]{}{${name}_resource_other_text}

\\vspace{0.5cm}
\\textbf{Handlungsplan:}\\\\
\\textit{Was kannst du konkret tun? Welche Schritte sind realistisch?}\\\\
\\ctmmTextArea[12cm]{3}{${name}_action_plan}{}

\\subsection*{\\textcolor{${color}}{3. Erfolg dokumentieren}}

\\textbf{Was hat heute funktioniert:}\\\\
\\ctmmTextArea[12cm]{2}{${name}_success}{}

\\vspace{0.5cm}
\\textbf{Lernpunkt f√ºr n√§chstes Mal:}\\\\
\\ctmmTextArea[12cm]{2}{${name}_learning}{}

\\vspace{1cm}
\\begin{center}
\\textit{\\textcolor{${color}}{\\faChevronRight~Weiter zu n√§chstem Modul} | \\textcolor{ctmmPurple}{\\faChevronLeft~Zur√ºck zur √úbersicht}}
\\end{center}
`;
    }

    /**
     * Generate Tool module
     */
    generateTool(name, options) {
        const title = options.title || this.formatTitle(name);
        const color = options.color || 'ctmmOrange';
        const icon = options.icon || CTMM_ICONS.tool;
        const toolNumber = options.toolNumber || this.generateToolNumber();
        
        return `% CTMM Tool ${toolNumber}: ${title}
% Generated by CTMM Module Generator v1.0.0

\\newpage
\\section*{\\textcolor{${color}}{${icon}~TOOL ${toolNumber}: ${title.toUpperCase()}}}
\\label{sec:tool-${name}}
\\addcontentsline{toc}{section}{Tool ${toolNumber}: ${title}}

\\begin{quote}
\\textit{\\textcolor{${color}}{${this.generateToolQuote(name)}}}\\\\
\\textbf{\\textcolor{${color}}{Wann verwenden?}}\\\\
${this.generateToolUsage(name)}
\\end{quote}

\\subsection*{\\textcolor{${color}}{1. Grundlagen}}

\\begin{${color.replace('ctmm', 'ctmm')}Box}{Was ist ${title}?}
${this.generateToolDescription(name)}
\\end{${color.replace('ctmm', 'ctmm')}Box}

\\subsection*{\\textcolor{${color}}{2. Anwendung}}

\\begin{ctmmGreenBox}{Schritt-f√ºr-Schritt Anleitung}
\\begin{enumerate}
${this.generateToolSteps(name)}
\\end{enumerate}
\\end{ctmmGreenBox}

\\subsection*{\\textcolor{${color}}{3. Pers√∂nlicher Arbeitsbereich}}

\\begin{ctmmBlueBox}{${icon}~Praxis-√úbung}
\\textbf{Situation, in der ich dieses Tool ausprobieren m√∂chte:}\\\\
\\ctmmTextField[12cm]{Beschreibe eine konkrete Situation}{${name}_practice_situation}

\\vspace{0.5cm}
\\textbf{Meine Erfahrungen mit diesem Tool:}\\\\
\\ctmmTextArea[12cm]{3}{${name}_experience}{}

\\vspace{0.5cm}
\\textbf{Bewertung der Wirksamkeit (1-10):}\\\\
\\ctmmTextField[3cm]{}{${name}_effectiveness} \\quad \\textit{(1=gar nicht hilfreich, 10=sehr hilfreich)}

\\vspace{0.5cm}
\\textbf{Anpassungen f√ºr mich pers√∂nlich:}\\\\
\\ctmmTextArea[12cm]{2}{${name}_adaptations}{}
\\end{ctmmBlueBox}

\\subsection*{\\textcolor{${color}}{4. Integration in den Alltag}}

\\textbf{Erinnerungshilfen:}\\\\
\\ctmmCheckBox[${name}_reminder_phone]{Handy-Erinnerung} \\quad
\\ctmmCheckBox[${name}_reminder_notes]{Notizzettel} \\\\
\\ctmmCheckBox[${name}_reminder_partner]{Partner informieren} \\quad
\\ctmmCheckBox[${name}_reminder_other]{Andere:} \\ctmmTextField[4cm]{}{${name}_reminder_other_text}

\\vspace{1cm}
\\begin{center}
\\textit{\\textcolor{${color}}{\\faChevronRight~Weiter zu n√§chstem Tool} | \\textcolor{ctmmPurple}{\\faBookmark~Direkt zu Arbeitsbl√§ttern}}
\\end{center}
`;
    }

    /**
     * Generate Notfallkarte (emergency card) module
     */
    generateNotfallkarte(name, options) {
        const title = options.title || this.formatTitle(name);
        const color = options.color || 'ctmmRed';
        const icon = options.icon || CTMM_ICONS.notfallkarte;
        
        return `% CTMM Notfallkarte: ${title}
% Generated by CTMM Module Generator v1.0.0

\\newpage
\\section*{\\textcolor{${color}}{${icon}~NOTFALLKARTE: ${title.toUpperCase()}}}
\\label{sec:notfall-${name}}
\\addcontentsline{toc}{section}{Notfallkarte: ${title}}

\\begin{${color.replace('ctmm', 'ctmm')}Box}{\\faExclamationTriangle~WICHTIGE INFORMATION}
\\textbf{Diese Karte ist f√ºr akute Situationen gedacht.}\\\\
\\textit{Bewahre sie griffbereit auf - digital oder ausgedruckt.}
\\end{${color.replace('ctmm', 'ctmm')}Box}

\\subsection*{\\textcolor{${color}}{\\faPhoneAlt~NOTFALLKONTAKTE}}

\\begin{ctmmGrayBox}{Kontakte f√ºr ${title}-Situationen}
\\textbf{Prim√§rer Kontakt:}\\\\
\\ctmmTextField[6cm]{Name}{${name}_contact_primary_name} \\quad \\ctmmTextField[5cm]{Telefon}{${name}_contact_primary_phone}

\\vspace{0.3cm}
\\textbf{Backup-Kontakt:}\\\\
\\ctmmTextField[6cm]{Name}{${name}_contact_backup_name} \\quad \\ctmmTextField[5cm]{Telefon}{${name}_contact_backup_phone}

\\vspace{0.3cm}
\\textbf{Professionelle Hilfe:}\\\\
\\ctmmTextField[6cm]{Therapeut/√Ñrztin}{${name}_contact_professional_name} \\quad \\ctmmTextField[5cm]{Telefon}{${name}_contact_professional_phone}

\\vspace{0.3cm}
\\textbf{Krisenhotline:}\\\\
\\textit{Telefonseelsorge: 0800 111 0 111 oder 0800 111 0 222 (kostenfrei, 24h)}
\\end{ctmmGrayBox}

\\subsection*{\\textcolor{${color}}{\\faFirstAid~SOFORTMASSNAHMEN}}

\\begin{ctmmGreenBox}{Was kann ich JETZT tun?}
${this.generateEmergencySteps(name)}
\\end{ctmmGreenBox}

\\subsection*{\\textcolor{${color}}{\\faShieldAlt~PERS√ñNLICHE SICHERHEITSSTRATEGIE}}

\\textbf{Meine bew√§hrten Strategien:}\\\\
\\ctmmCheckBox[${name}_strategy_breathing]{Atemtechnik (4-7-8)} \\quad
\\ctmmCheckBox[${name}_strategy_grounding]{5-4-3-2-1 Grounding} \\\\
\\ctmmCheckBox[${name}_strategy_movement]{K√∂rperliche Bewegung} \\quad
\\ctmmCheckBox[${name}_strategy_cold]{K√§ltereiz (Eisw√ºrfel, kaltes Wasser)} \\\\
\\ctmmCheckBox[${name}_strategy_distraction]{Ablenkung} \\quad
\\ctmmCheckBox[${name}_strategy_safe_place]{Sicherer Ort aufsuchen} \\\\
\\ctmmCheckBox[${name}_strategy_other]{Andere:} \\ctmmTextField[5cm]{}{${name}_strategy_other_text}

\\vspace{0.5cm}
\\textbf{Pers√∂nliche Notizen:}\\\\
\\textit{Was hilft mir besonders? Worauf muss ich achten?}\\\\
\\ctmmTextArea[12cm]{3}{${name}_personal_notes}{}

\\subsection*{\\textcolor{${color}}{\\faExclamationCircle~WARNSIGNALE}}

\\textbf{Ich erkenne die Situation an diesen Zeichen:}\\\\
\\ctmmTextArea[12cm]{2}{${name}_warning_signs}{}

\\vspace{0.5cm}
\\textbf{Dann ist es Zeit f√ºr professionelle Hilfe:}\\\\
\\ctmmTextArea[12cm]{2}{${name}_professional_help_needed}{}

\\vspace{1cm}
\\begin{center}
\\textbf{\\textcolor{${color}}{\\faHeartbeat~Du schaffst das! Hilfe zu holen ist ein Zeichen von St√§rke.}}
\\end{center}

\\vspace{1cm}
\\begin{center}
\\textit{\\textcolor{ctmmBlue}{\\faChevronRight~Weiter zu Safe-Words} | \\textcolor{ctmmPurple}{\\faChevronLeft~Zur√ºck zu Tools}}
\\end{center}
`;
    }

    /**
     * Helper functions for content generation
     */
    formatTitle(name) {
        return name.split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    generateToolNumber() {
        return Math.floor(Math.random() * 50) + 10; // Random number between 10-59
    }

    generateToolQuote(name) {
        const quotes = {
            'grounding': 'Erdung bringt dich zur√ºck ins Hier und Jetzt -- ein Anker in st√ºrmischen Zeiten.',
            'breathing': 'Der Atem ist die Br√ºcke zwischen K√∂rper und Geist -- nutze sie bewusst.',
            'communication': 'Verstehen beginnt mit dem Wunsch, verstanden zu werden.',
            'default': 'Jedes Tool ist ein Baustein auf dem Weg zu mehr Selbstregulation.'
        };
        
        for (const [key, quote] of Object.entries(quotes)) {
            if (name.includes(key)) {
                return quote;
            }
        }
        return quotes.default;
    }

    generateToolUsage(name) {
        const usages = {
            'grounding': 'Bei Dissoziation, √úberforderung oder wenn du dich von der Realit√§t abgetrennt f√ºhlst.',
            'breathing': 'Bei Angst, Panik, Stress oder zur allgemeinen Entspannung.',
            'communication': 'Vor schwierigen Gespr√§chen oder bei Missverst√§ndnissen.',
            'default': 'Immer wenn du dich √ºberw√§ltigt f√ºhlst und Unterst√ºtzung brauchst.'
        };
        
        for (const [key, usage] of Object.entries(usages)) {
            if (name.includes(key)) {
                return usage;
            }
        }
        return usages.default;
    }

    generateToolDescription(name) {
        const descriptions = {
            'grounding': 'Grounding-Techniken helfen dabei, bei starken Emotionen oder Dissoziation wieder in den gegenw√§rtigen Moment zur√ºckzufinden. Sie nutzen die f√ºnf Sinne, um eine Verbindung zur physischen Realit√§t herzustellen.',
            'breathing': 'Atemtechniken sind kraftvolle Tools zur Selbstregulation. Sie aktivieren das parasympathische Nervensystem und k√∂nnen schnell Entspannung und innere Ruhe f√∂rdern.',
            'communication': 'Kommunikationstools unterst√ºtzen dabei, Gef√ºhle und Bed√ºrfnisse klar auszudr√ºcken und Missverst√§ndnisse zu vermeiden.',
            'default': 'Dieses Tool unterst√ºtzt dich dabei, in herausfordernden Situationen handlungsf√§hig zu bleiben und deine Selbstregulation zu st√§rken.'
        };
        
        for (const [key, desc] of Object.entries(descriptions)) {
            if (name.includes(key)) {
                return desc;
            }
        }
        return descriptions.default;
    }

    generateToolSteps(name) {
        const steps = {
            'grounding': '  \\item \\textbf{5 Dinge sehen:} Benenne 5 Dinge, die du um dich herum siehst\\n  \\item \\textbf{4 Dinge h√∂ren:} Konzentriere dich auf 4 verschiedene Ger√§usche\\n  \\item \\textbf{3 Dinge f√ºhlen:} Nimm 3 Texturen oder Temperaturen wahr\\n  \\item \\textbf{2 Dinge riechen:} Identifiziere 2 verschiedene Ger√ºche\\n  \\item \\textbf{1 Geschmack:} Nimm einen Geschmack wahr (z.B. Kaugummi)',
            'breathing': '  \\item \\textbf{Position:} Setze oder lege dich bequem hin\\n  \\item \\textbf{4 Sekunden einatmen:} Durch die Nase, ruhig und tief\\n  \\item \\textbf{7 Sekunden anhalten:} Den Atem sanft halten\\n  \\item \\textbf{8 Sekunden ausatmen:} Durch den Mund, vollst√§ndig\\n  \\item \\textbf{Wiederholen:} 4-8 Zyklen, je nach Bedarf',
            'default': '  \\item \\textbf{Vorbereitung:} Sorge f√ºr eine ruhige Umgebung\\n  \\item \\textbf{Anwendung:} Folge den Anweisungen Schritt f√ºr Schritt\\n  \\item \\textbf{Beobachtung:} Achte auf Ver√§nderungen in deinem Befinden\\n  \\item \\textbf{Anpassung:} Modifiziere das Tool nach deinen Bed√ºrfnissen'
        };
        
        for (const [key, stepList] of Object.entries(steps)) {
            if (name.includes(key)) {
                return stepList;
            }
        }
        return steps.default;
    }

    generateEmergencySteps(name) {
        const steps = {
            'panik': '\\begin{enumerate}\n  \\item \\textbf{Sicherheit:} Bringe dich an einen sicheren Ort\n  \\item \\textbf{Atmen:} 4-7-8 Atemtechnik anwenden\n  \\item \\textbf{Grounding:} 5-4-3-2-1 Methode nutzen\n  \\item \\textbf{Selbstf√ºrsorge:} Kaltes Wasser, bequeme Position\n  \\item \\textbf{Hilfe:} Bei anhaltender Panik Kontakte anrufen\n\\end{enumerate}',
            'default': '\\begin{enumerate}\n  \\item \\textbf{Stopp:} Halte inne und atme bewusst\n  \\item \\textbf{Sicherheit:} Pr√ºfe deine Umgebung\n  \\item \\textbf{Stabilisierung:} Nutze deine bew√§hrten Strategien\n  \\item \\textbf{Hilfe:} Kontaktiere bei Bedarf Unterst√ºtzung\n\\end{enumerate}'
        };
        
        for (const [key, stepList] of Object.entries(steps)) {
            if (name.includes(key)) {
                return stepList;
            }
        }
        return steps.default;
    }
}

// CLI Interface
function main() {
    const args = process.argv.slice(2);
    
    if (args.length < 2) {
        console.log('CTMM Module Generator v1.0.0');
        console.log('');
        console.log('Usage: node module-generator.js <type> <name> [options]');
        console.log('');
        console.log('Types:');
        console.log('  arbeitsblatt  - Interactive worksheet for therapy exercises');
        console.log('  tool          - Technique or method for specific situations');
        console.log('  notfallkarte  - Emergency card with crisis management steps');
        console.log('');
        console.log('Examples:');
        console.log('  node module-generator.js arbeitsblatt taeglicher-stimmungscheck');
        console.log('  node module-generator.js tool 5-4-3-2-1-grounding');
        console.log('  node module-generator.js notfallkarte panikattacken');
        console.log('');
        process.exit(1);
    }

    const [type, name] = args;
    const generator = new CTMMModuleGenerator();
    
    try {
        const filePath = generator.generateModule(type, name);
        console.log('');
        console.log('üìã Next steps:');
        console.log('1. Review the generated module content');
        console.log('2. Customize the content for your specific needs');
        console.log('3. Add the module to main.tex: \\input{modules/' + path.basename(filePath, '.tex') + '}');
        console.log('4. Run: python3 ctmm_build.py');
        console.log('');
        console.log('üéØ Module ready for CTMM therapeutic use!');
    } catch (error) {
        console.error('‚ùå Error:', error.message);
        process.exit(1);
    }
}

// Run CLI if this script is executed directly
if (require.main === module) {
    main();
}

module.exports = CTMMModuleGenerator;