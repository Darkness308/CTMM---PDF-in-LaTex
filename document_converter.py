#!/usr/bin/env python3
"""
CTMM Document Converter

Converts Word documents to clean LaTeX and fixes over-escaped LaTeX files.
This tool addresses the systematic LaTeX over-escaping problem and enables
conversion of therapy documents from the therapie-material/ directory.

Usage:
    python3 document_converter.py [options]
    make convert         # Convert Word documents to LaTeX
    make convert-clean   # Fix over-escaped LaTeX files

Author: CTMM Team
License: MIT
"""

import os
import sys
import argparse
import subprocess
import re
import glob
from pathlib import Path


class DocumentConverter:
    """Main document conversion class."""
    
    def __init__(self, input_dir="therapie-material", output_dir="converted"):
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.over_escape_patterns = [
            # Most specific patterns first
            (r'\\section\\textbackslash\{\}\{', r'\\section{'),
            (r'\\subsection\\textbackslash\{\}\{', r'\\subsection{'),
            (r'\\label\\textbackslash\{\}\{', r'\\label{'),
            (r'\\textbf\\textbackslash\{\}\{', r'\\textbf{'),
            
            # Common over-escaping patterns from PR description
            (r'\\textbf\\textbackslash\{\}', r'\\textbf'),
            (r'\\section\\textbackslash\{\}', r'\\section'),
            (r'\\subsection\\textbackslash\{\}', r'\\subsection'),
            (r'\\label\\textbackslash\{\}', r'\\label'),
            (r'\\texorpdfstring\\textbackslash\{\}', r'\\texorpdfstring'),
            (r'\\hypertarget\\textbackslash\{\}', r'\\hypertarget'),
            
            # Fix the escaped braces  
            (r'\\textbackslash\{\}\{', r'{'),
            (r'\\textbackslash\{\}\}', r'}'),
            
            # General patterns (most general last)
            (r'\\textbackslash\{\}([a-zA-Z]+)', r'\\\1'),
            (r'\\textbackslash\{\}', r'\\'),
        ]
    
    def ensure_output_dir(self):
        """Create output directory if it doesn't exist."""
        self.output_dir.mkdir(exist_ok=True)
        print(f"INFO: Output directory: {self.output_dir}")
    
    def convert_docx_to_latex(self, docx_file):
        """Convert a single .docx file to LaTeX using pandoc."""
        try:
            output_file = self.output_dir / (docx_file.stem + ".tex")
            
            # Use pandoc with specific LaTeX settings for therapy documents
            cmd = [
                "pandoc", 
                str(docx_file),
                "-f", "docx",
                "-t", "latex",
                "--wrap=preserve",
                "--standalone",
                "-o", str(output_file)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"✓ Converted: {docx_file.name} -> {output_file.name}")
                
                # Apply post-processing to clean up the LaTeX
                self.post_process_latex(output_file)
                return True
            else:
                print(f"✗ Failed to convert {docx_file.name}: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"✗ Error converting {docx_file.name}: {e}")
            return False
    
    def post_process_latex(self, latex_file):
        """Post-process LaTeX file to make it CTMM-compatible."""
        try:
            with open(latex_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Remove pandoc's document class and use CTMM structure
            content = re.sub(r'\\documentclass\{.*?\}', '', content)
            content = re.sub(r'\\begin\{document\}', '', content)
            content = re.sub(r'\\end\{document\}', '', content)
            
            # Clean up German language handling
            content = re.sub(r'\\usepackage\[ngerman\]\{babel\}', '', content)
            
            # Preserve therapeutic content structure
            content = re.sub(r'\\section\{([^}]+)\}', r'\\section{\1}', content)
            content = re.sub(r'\\subsection\{([^}]+)\}', r'\\subsection{\1}', content)
            
            # Add CTMM module header
            module_name = latex_file.stem.replace('_', ' ').title()
            header = f"""% CTMM Therapy Module: {module_name}
% Converted from Word document: {latex_file.stem}.docx
% Auto-generated by document_converter.py

"""
            
            content = header + content
            
            with open(latex_file, 'w', encoding='utf-8') as f:
                f.write(content)
                
            print(f"  → Post-processed: {latex_file.name}")
            
        except Exception as e:
            print(f"  → Warning: Post-processing failed for {latex_file.name}: {e}")
    
    def fix_over_escaped_latex(self, latex_file):
        """Fix over-escaped LaTeX in an existing file."""
        try:
            with open(latex_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # Apply all over-escape patterns
            for pattern, replacement in self.over_escape_patterns:
                content = re.sub(pattern, replacement, content)
            
            if content != original_content:
                # Create backup
                backup_file = latex_file.with_suffix('.tex.backup')
                with open(backup_file, 'w', encoding='utf-8') as f:
                    f.write(original_content)
                
                # Write cleaned content
                with open(latex_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"✓ Fixed over-escaping: {latex_file.name} (backup: {backup_file.name})")
                return True
            else:
                print(f"  No over-escaping found: {latex_file.name}")
                return False
                
        except Exception as e:
            print(f"✗ Error fixing {latex_file.name}: {e}")
            return False
    
    def convert_all_docx(self):
        """Convert all .docx files in the input directory."""
        if not self.input_dir.exists():
            print(f"ERROR: Input directory {self.input_dir} does not exist")
            return False
        
        docx_files = list(self.input_dir.glob("*.docx"))
        
        if not docx_files:
            print(f"INFO: No .docx files found in {self.input_dir}")
            return True
        
        print(f"INFO: Found {len(docx_files)} .docx files to convert")
        self.ensure_output_dir()
        
        success_count = 0
        for docx_file in docx_files:
            if self.convert_docx_to_latex(docx_file):
                success_count += 1
        
        print(f"\nConversion completed: {success_count}/{len(docx_files)} files successful")
        return success_count == len(docx_files)
    
    def fix_all_over_escaped(self, search_dir="."):
        """Fix over-escaped LaTeX in all .tex files."""
        search_path = Path(search_dir)
        tex_files = list(search_path.glob("**/*.tex"))
        
        if not tex_files:
            print(f"INFO: No .tex files found in {search_path}")
            return True
        
        print(f"INFO: Found {len(tex_files)} .tex files to check")
        
        fixed_count = 0
        for tex_file in tex_files:
            if self.fix_over_escaped_latex(tex_file):
                fixed_count += 1
        
        print(f"\nOver-escape fix completed: {fixed_count}/{len(tex_files)} files fixed")
        return True


def main():
    """Main function with command-line interface."""
    parser = argparse.ArgumentParser(
        description="CTMM Document Converter - Convert Word docs and fix LaTeX over-escaping",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s                    # Convert all .docx files in therapie-material/
  %(prog)s --clean            # Fix over-escaped LaTeX files
  %(prog)s --input docs       # Convert from custom input directory
  %(prog)s --output out       # Convert to custom output directory
        """
    )
    
    parser.add_argument(
        "--input", "-i",
        default="therapie-material",
        help="Input directory containing .docx files (default: therapie-material)"
    )
    
    parser.add_argument(
        "--output", "-o", 
        default="converted",
        help="Output directory for converted LaTeX files (default: converted)"
    )
    
    parser.add_argument(
        "--clean", "-c",
        action="store_true",
        help="Fix over-escaped LaTeX files instead of converting"
    )
    
    parser.add_argument(
        "--search-dir", "-s",
        default=".",
        help="Directory to search for .tex files when using --clean (default: current directory)"
    )
    
    args = parser.parse_args()
    
    print("CTMM Document Converter")
    print("======================")
    
    converter = DocumentConverter(args.input, args.output)
    
    if args.clean:
        print(f"Fixing over-escaped LaTeX files in: {args.search_dir}")
        success = converter.fix_all_over_escaped(args.search_dir)
    else:
        print(f"Converting Word documents from: {args.input}")
        success = converter.convert_all_docx()
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())